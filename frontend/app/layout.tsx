"use client";
// import type { Metadata } from "next";
import dynamic from "next/dynamic";
// import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/(ui)/sidebar";
import { ThemeProvider } from "@/components/theme-provider";
import { EnvironmentsEnum } from "@multiversx/sdk-dapp/types";
import { AxiosInterceptorContext } from "@multiversx/sdk-dapp/wrappers/AxiosInterceptorContext";
export const DappProvider = dynamic(
  async () => {
    return (await import("@multiversx/sdk-dapp/wrappers/DappProvider")).DappProvider;
  },
  { ssr: false }
);

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={` antialiased`}>
        <ThemeProvider attribute={"class"} defaultTheme="system" enableSystem disableTransitionOnChange>
          <AxiosInterceptorContext.Provider>
            <AxiosInterceptorContext.Interceptor authenticatedDomains={["https://tools.elrond.com"]}>
              <DappProvider
                environment={EnvironmentsEnum.testnet}
                customNetworkConfig={{ walletConnectV2ProjectId: "f55bca5d6156779b877eaea025ef7a54" }}
                dappConfig={{ shouldUseWebViewProvider: true }}
              >
                <SidebarProvider>
                  <AppSidebar />
                  <SidebarTrigger />
                  {children}
                </SidebarProvider>
              </DappProvider>
            </AxiosInterceptorContext.Interceptor>
          </AxiosInterceptorContext.Provider>
        </ThemeProvider>
      </body>
    </html>
  );
}
